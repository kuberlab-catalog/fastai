kind: MLApp
metadata:
  name: pytorch
spec:
  package_manager: "pip{{.python_version.value}}"
  packages:
  - names:
    {{- range $i, $value := .packages }}
    - "{{ $value }}"
    {{- end }}
    manager: "pip{{.python_version.value}}"
  default_mount_path: "/notebooks"
  tasks:
  {{- if .lessons.value }}
  - name: install-lessons
    {{- if .installLessons.value }}
    type: init
    {{- end }}
    resources:
    - name: worker
      replicas: 1
      restartPolicy: Never
      maxRestartCount: 0
      allowFail: true
      images:
        gpu: "kuberlab/fastai:latest-gpu"
        cpu: "kuberlab/fastai:latest-cpu"
      command: >-
        kdataset pull {{ .lessons.workspace }} {{ .lessons.value }}:{{ .lessons.version }} --output lessons.tar;
        tar -xvf lessons.tar;
        rm lessons.tar
      workdir: "$LESSONS_DIR"
      resources:
        accelerators:
          gpu: 0
        requests:
          cpu: "100m"
          memory: 1Gi
        limits:
          cpu: "1"
          memory: 4Gi
      volumes:
      - name: lessons
  - name: run-lesson
    resources:
    - name: worker
      replicas: 1
      restartPolicy: Never
      maxRestartCount: 0
      allowFail: true
      images:
        gpu: "kuberlab/fastai:latest-gpu"
        cpu: "kuberlab/fastai:latest-cpu"
      command: >-
        jupyter nbconvert $LESSONS_DIR/lesson2-sgd.ipynb
          --execute
          --to html
          --stdout
          --ExecutePreprocessor.timeout=-1
        | python submit_report.py
      workdir: "$SRC_DIR"
      resources:
        accelerators:
        {{- if .useGPU.value }}
          gpu: 1
        {{- else }}
          gpu: 0
        {{- end }}
        requests:
          cpu: "1"
          memory: 1Gi
        limits:
          cpu: "2"
          memory: 4Gi
      default_volume_mapping: true
  {{- end }}
  - name: train
    resources:
    - name: worker
      replicas: 1
      restartPolicy: Never
      maxRestartCount: 0
      allowFail: true
      images:
        gpu: "kuberlab/fastai:latest-gpu"
        cpu: "kuberlab/fastai:latest-cpu"
      command: >-
        python example.py --train-dir $TRAINING_DIR
      workdir: "$SRC_DIR"
      resources:
        accelerators:
          gpu: 1
        requests:
          cpu: "1"
          memory: 1Gi
        limits:
          cpu: "2"
          memory: 4Gi
      default_volume_mapping: true
  uix:
  - name: jupyter
    displayName: Jupyter
    images:
      gpu: "kuberlab/fastai:latest-gpu"
      cpu: "kuberlab/fastai:latest-cpu"
    resources:
      accelerators:
      {{- if .useGPU.value }}
        gpu: 1
      {{- else }}
        gpu: 0
      {{- end }}
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 2000m
        memory: 4Gi
    ports:
    - port: 8888
      targetPort: 8888
      protocol: TCP
      name: http
    default_volume_mapping: true
  {{- if .tensorboard.value }}
  - name: tensorboard
    displayName: Tensorboard
    command: "tensorboard --logdir=$TRAINING_DIR"
    images:
      gpu: "kuberlab/fastai:latest-gpu"
      cpu: "kuberlab/fastai:latest-cpu"
    ports:
    - port: 6006
      targetPort: 6006
      protocol: TCP
      name: http
    resources:
      requests:
        cpu: 50m
        memory: 64Mi
      limits:
        cpu: 1000m
        memory: 2Gi
    volumes:
    - name: training
  {{- end }}
  volumes:
  - name: training
    clusterStorage: {{ .storage.value }}
  - gitRepo:
      repository: {{ gitRepo .src.value }}
      accountId: '{{ .src.accountId }}'
      revision: '{{ .src.revision }}'
    isLibDir: false
    name: src
    subPath: {{ gitSubPath .src.value }}
  - isLibDir: true
    name: lib
    clusterStorage: {{ .storage.value }}
  {{- if .data.value }}
  - name: data
    datasetFS:
      workspace: {{ .data.workspace }}
      version: {{ .data.version }}
      dataset: {{ .data.value }}
  {{- end }}
  - name: torch-models
    clusterStorage: {{ .storage.value }}
    {{- if .torchShared.value }}
    subPath: "/torch-models"
    {{- end }}
    mountPath: /root/.torch/models
    readOnly: false
  - name: lessons
    clusterStorage: {{ .storage.value }}
  - mountPath: /notebooks
    name: code
    subPath: code
    clusterStorage: {{ .storage.value }}
  - mountPath: /dev/shm
    name: shared
    emptyDir:
      sizeLimit: 8096Mi
      medium: Memory
